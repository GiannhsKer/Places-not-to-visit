{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.any_hmac_sha1 = exports.b64_hmac_sha1 = exports.hex_hmac_sha1 = exports.any_sha1 = exports.b64_sha1 = exports.hex_sha1 = void 0;\nvar hexcase = 0;\nvar b64pad = '';\n\nvar hex_sha1 = function hex_sha1(s) {\n  return rstr2hex(rstr_sha1(str2rstr_utf8(s)));\n};\n\nexports.hex_sha1 = hex_sha1;\nexports.default = exports.hex_sha1;\n\nvar b64_sha1 = function b64_sha1(s) {\n  return rstr2b64(rstr_sha1(str2rstr_utf8(s)));\n};\n\nexports.b64_sha1 = b64_sha1;\n\nvar any_sha1 = function any_sha1(s, e) {\n  return rstr2any(rstr_sha1(str2rstr_utf8(s)), e);\n};\n\nexports.any_sha1 = any_sha1;\n\nvar hex_hmac_sha1 = function hex_hmac_sha1(k, d) {\n  return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n};\n\nexports.hex_hmac_sha1 = hex_hmac_sha1;\n\nvar b64_hmac_sha1 = function b64_hmac_sha1(k, d) {\n  return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\n};\n\nexports.b64_hmac_sha1 = b64_hmac_sha1;\n\nvar any_hmac_sha1 = function any_hmac_sha1(k, d, e) {\n  return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e);\n};\n\nexports.any_hmac_sha1 = any_hmac_sha1;\n\nvar sha1_vm_test = function sha1_vm_test() {\n  return exports.hex_sha1('abc').toLowerCase() === 'a9993e364706816aba3e25717850c26c9cd0d89d';\n};\n\nvar rstr_sha1 = function rstr_sha1(s) {\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n};\n\nvar rstr_hmac_sha1 = function rstr_hmac_sha1(key, data) {\n  var bkey = rstr2binb(key);\n\n  if (bkey.length > 16) {\n    bkey = binb_sha1(bkey, key.length * 8);\n  }\n\n  var ipad = Array(16);\n  var opad = Array(16);\n\n  for (var i = 0; i < 16; i++) {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5c5c5c5c;\n  }\n\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n};\n\nvar rstr2hex = function rstr2hex(input) {\n  try {\n    hexcase;\n  } catch (e) {\n    hexcase = 0;\n  }\n\n  var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';\n  var output = '';\n  var x;\n\n  for (var i = 0; i < input.length; i++) {\n    x = input.charCodeAt(i);\n    output += hex_tab.charAt(x >>> 4 & 0x0f) + hex_tab.charAt(x & 0x0f);\n  }\n\n  return output;\n};\n\nvar rstr2b64 = function rstr2b64(input) {\n  try {\n    b64pad;\n  } catch (e) {\n    b64pad = '';\n  }\n\n  var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  var output = '';\n  var len = input.length;\n\n  for (var i = 0; i < len; i += 3) {\n    var triplet = input.charCodeAt(i) << 16 | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n\n    for (var j = 0; j < 4; j++) {\n      if (i * 8 + j * 6 > input.length * 8) {\n        output += b64pad;\n      } else {\n        output += tab.charAt(triplet >>> 6 * (3 - j) & 0x3f);\n      }\n    }\n  }\n\n  return output;\n};\n\nvar rstr2any = function rstr2any(input, encoding) {\n  var divisor = encoding.length;\n  var remainders = [];\n  var i, q, x, quotient;\n  var dividend = Array(Math.ceil(input.length / 2));\n\n  for (i = 0; i < dividend.length; i++) {\n    dividend[i] = input.charCodeAt(i * 2) << 8 | input.charCodeAt(i * 2 + 1);\n  }\n\n  while (dividend.length > 0) {\n    quotient = [];\n    x = 0;\n\n    for (i = 0; i < dividend.length; i++) {\n      x = (x << 16) + dividend[i];\n      q = Math.floor(x / divisor);\n      x -= q * divisor;\n\n      if (quotient.length > 0 || q > 0) {\n        quotient[quotient.length] = q;\n      }\n    }\n\n    remainders[remainders.length] = x;\n    dividend = quotient;\n  }\n\n  var output = '';\n\n  for (i = remainders.length - 1; i >= 0; i--) {\n    output += encoding.charAt(remainders[i]);\n  }\n\n  var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));\n\n  for (i = output.length; i < full_length; i++) {\n    output = encoding[0] + output;\n  }\n\n  return output;\n};\n\nvar str2rstr_utf8 = function str2rstr_utf8(input) {\n  var output = '';\n  var i = -1;\n  var x, y;\n\n  while (++i < input.length) {\n    x = input.charCodeAt(i);\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n\n    if (x >= 0xd800 && x <= 0xdbff && y >= 0xdc00 && y <= 0xdfff) {\n      x = 0x10000 + ((x & 0x03ff) << 10) + (y & 0x03ff);\n      i++;\n    }\n\n    if (x <= 0x7f) {\n      output += String.fromCharCode(x);\n    } else if (x <= 0x7ff) {\n      output += String.fromCharCode(0xc0 | x >>> 6 & 0x1f, 0x80 | x & 0x3f);\n    } else if (x <= 0xffff) {\n      output += String.fromCharCode(0xe0 | x >>> 12 & 0x0f, 0x80 | x >>> 6 & 0x3f, 0x80 | x & 0x3f);\n    } else if (x <= 0x1fffff) {\n      output += String.fromCharCode(0xf0 | x >>> 18 & 0x07, 0x80 | x >>> 12 & 0x3f, 0x80 | x >>> 6 & 0x3f, 0x80 | x & 0x3f);\n    }\n  }\n\n  return output;\n};\n\nvar str2rstr_utf16le = function str2rstr_utf16le(input) {\n  var output = '';\n\n  for (var i = 0; i < input.length; i++) {\n    output += String.fromCharCode(input.charCodeAt(i) & 0xff, input.charCodeAt(i) >>> 8 & 0xff);\n  }\n\n  return output;\n};\n\nvar str2rstr_utf16be = function str2rstr_utf16be(input) {\n  var output = '';\n\n  for (var i = 0; i < input.length; i++) {\n    output += String.fromCharCode(input.charCodeAt(i) >>> 8 & 0xff, input.charCodeAt(i) & 0xff);\n  }\n\n  return output;\n};\n\nvar rstr2binb = function rstr2binb(input) {\n  var output = Array(input.length >> 2);\n\n  for (var i = 0; i < output.length; i++) {\n    output[i] = 0;\n  }\n\n  for (var i = 0; i < input.length * 8; i += 8) {\n    output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << 24 - i % 32;\n  }\n\n  return output;\n};\n\nvar binb2rstr = function binb2rstr(input) {\n  var output = '';\n\n  for (var i = 0; i < input.length * 32; i += 8) {\n    output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 0xff);\n  }\n\n  return output;\n};\n\nvar binb_sha1 = function binb_sha1(x, len) {\n  x[len >> 5] |= 0x80 << 24 - len % 32;\n  x[(len + 64 >> 9 << 4) + 15] = len;\n  var w = Array(80);\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n  var e = -1009589776;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for (var j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = x[i + j];\n      } else {\n        w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = bit_rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n\n  return [a, b, c, d, e];\n};\n\nvar sha1_ft = function sha1_ft(t, b, c, d) {\n  if (t < 20) {\n    return b & c | ~b & d;\n  }\n\n  if (t < 40) {\n    return b ^ c ^ d;\n  }\n\n  if (t < 60) {\n    return b & c | b & d | c & d;\n  }\n\n  return b ^ c ^ d;\n};\n\nvar sha1_kt = function sha1_kt(t) {\n  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n};\n\nvar safe_add = function safe_add(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n};\n\nvar bit_rol = function bit_rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n};","map":{"version":3,"sources":["../src/sha1.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/* eslint-disable no-bitwise */\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS 180-1\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.any_hmac_sha1 = exports.b64_hmac_sha1 = exports.hex_hmac_sha1 = exports.any_sha1 = exports.b64_sha1 = exports.hex_sha1 = void 0;\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\n/* hex output format. 0 - lowercase; 1 - uppercase */\nlet hexcase = 0;\n/* base-64 pad character. \"=\" for strict RFC compliance */\nlet b64pad = '';\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nconst hex_sha1 = (s) => rstr2hex(rstr_sha1(str2rstr_utf8(s)));\nexports.hex_sha1 = hex_sha1;\nexports.default = exports.hex_sha1;\nconst b64_sha1 = (s) => rstr2b64(rstr_sha1(str2rstr_utf8(s)));\nexports.b64_sha1 = b64_sha1;\nconst any_sha1 = (s, e) => rstr2any(rstr_sha1(str2rstr_utf8(s)), e);\nexports.any_sha1 = any_sha1;\nconst hex_hmac_sha1 = (k, d) => rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\nexports.hex_hmac_sha1 = hex_hmac_sha1;\nconst b64_hmac_sha1 = (k, d) => rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)));\nexports.b64_hmac_sha1 = b64_hmac_sha1;\nconst any_hmac_sha1 = (k, d, e) => rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e);\nexports.any_hmac_sha1 = any_hmac_sha1;\n/*\n * Perform a simple self-test to see if the VM is working\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst sha1_vm_test = () => exports.hex_sha1('abc').toLowerCase() === 'a9993e364706816aba3e25717850c26c9cd0d89d';\n/*\n * Calculate the SHA1 of a raw string\n */\nconst rstr_sha1 = (s) => binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\n/*\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\n */\nconst rstr_hmac_sha1 = (key, data) => {\n    let bkey = rstr2binb(key);\n    if (bkey.length > 16) {\n        bkey = binb_sha1(bkey, key.length * 8);\n    }\n    let ipad = Array(16);\n    let opad = Array(16);\n    for (var i = 0; i < 16; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5c5c5c5c;\n    }\n    var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\n    return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\n};\n/*\n * Convert a raw string to a hex string\n */\nconst rstr2hex = (input) => {\n    try {\n        hexcase;\n    }\n    catch (e) {\n        hexcase = 0;\n    }\n    var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';\n    var output = '';\n    var x;\n    for (var i = 0; i < input.length; i++) {\n        x = input.charCodeAt(i);\n        output += hex_tab.charAt((x >>> 4) & 0x0f) + hex_tab.charAt(x & 0x0f);\n    }\n    return output;\n};\n/*\n * Convert a raw string to a base-64 string\n */\nconst rstr2b64 = (input) => {\n    try {\n        b64pad;\n    }\n    catch (e) {\n        b64pad = '';\n    }\n    var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var output = '';\n    var len = input.length;\n    for (var i = 0; i < len; i += 3) {\n        var triplet = (input.charCodeAt(i) << 16) |\n            (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) |\n            (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n        for (var j = 0; j < 4; j++) {\n            if (i * 8 + j * 6 > input.length * 8) {\n                output += b64pad;\n            }\n            else {\n                output += tab.charAt((triplet >>> (6 * (3 - j))) & 0x3f);\n            }\n        }\n    }\n    return output;\n};\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nconst rstr2any = (input, encoding) => {\n    var divisor = encoding.length;\n    var remainders = [];\n    var i, q, x, quotient;\n    /* Convert to an array of 16-bit big-endian values, forming the dividend */\n    var dividend = Array(Math.ceil(input.length / 2));\n    for (i = 0; i < dividend.length; i++) {\n        dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\n    }\n    /*\n     * Repeatedly perform a long division. The binary array forms the dividend,\n     * the length of the encoding is the divisor. Once computed, the quotient\n     * forms the dividend for the next step. We stop when the dividend is zero.\n     * All remainders are stored for later use.\n     */\n    while (dividend.length > 0) {\n        quotient = [];\n        x = 0;\n        for (i = 0; i < dividend.length; i++) {\n            x = (x << 16) + dividend[i];\n            q = Math.floor(x / divisor);\n            x -= q * divisor;\n            if (quotient.length > 0 || q > 0) {\n                quotient[quotient.length] = q;\n            }\n        }\n        remainders[remainders.length] = x;\n        dividend = quotient;\n    }\n    /* Convert the remainders to the output string */\n    var output = '';\n    for (i = remainders.length - 1; i >= 0; i--) {\n        output += encoding.charAt(remainders[i]);\n    }\n    /* Append leading zero equivalents */\n    var full_length = Math.ceil((input.length * 8) / (Math.log(encoding.length) / Math.log(2)));\n    for (i = output.length; i < full_length; i++) {\n        output = encoding[0] + output;\n    }\n    return output;\n};\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nconst str2rstr_utf8 = (input) => {\n    var output = '';\n    var i = -1;\n    var x, y;\n    while (++i < input.length) {\n        /* Decode utf-16 surrogate pairs */\n        x = input.charCodeAt(i);\n        y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n        if (x >= 0xd800 && x <= 0xdbff && y >= 0xdc00 && y <= 0xdfff) {\n            x = 0x10000 + ((x & 0x03ff) << 10) + (y & 0x03ff);\n            i++;\n        }\n        /* Encode output as utf-8 */\n        if (x <= 0x7f) {\n            output += String.fromCharCode(x);\n        }\n        else if (x <= 0x7ff) {\n            output += String.fromCharCode(0xc0 | ((x >>> 6) & 0x1f), 0x80 | (x & 0x3f));\n        }\n        else if (x <= 0xffff) {\n            output += String.fromCharCode(0xe0 | ((x >>> 12) & 0x0f), 0x80 | ((x >>> 6) & 0x3f), 0x80 | (x & 0x3f));\n        }\n        else if (x <= 0x1fffff) {\n            output += String.fromCharCode(0xf0 | ((x >>> 18) & 0x07), 0x80 | ((x >>> 12) & 0x3f), 0x80 | ((x >>> 6) & 0x3f), 0x80 | (x & 0x3f));\n        }\n    }\n    return output;\n};\n/*\n * Encode a string as utf-16\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst str2rstr_utf16le = (input) => {\n    var output = '';\n    for (var i = 0; i < input.length; i++) {\n        output += String.fromCharCode(input.charCodeAt(i) & 0xff, (input.charCodeAt(i) >>> 8) & 0xff);\n    }\n    return output;\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst str2rstr_utf16be = (input) => {\n    var output = '';\n    for (var i = 0; i < input.length; i++) {\n        output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xff, input.charCodeAt(i) & 0xff);\n    }\n    return output;\n};\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nconst rstr2binb = (input) => {\n    var output = Array(input.length >> 2);\n    for (var i = 0; i < output.length; i++) {\n        output[i] = 0;\n    }\n    for (var i = 0; i < input.length * 8; i += 8) {\n        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (24 - (i % 32));\n    }\n    return output;\n};\n/*\n * Convert an array of big-endian words to a string\n */\nconst binb2rstr = (input) => {\n    var output = '';\n    for (var i = 0; i < input.length * 32; i += 8) {\n        output += String.fromCharCode((input[i >> 5] >>> (24 - (i % 32))) & 0xff);\n    }\n    return output;\n};\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nconst binb_sha1 = (x, len) => {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (24 - (len % 32));\n    x[(((len + 64) >> 9) << 4) + 15] = len;\n    var w = Array(80);\n    var a = 1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d = 271733878;\n    var e = -1009589776;\n    for (var i = 0; i < x.length; i += 16) {\n        var olda = a;\n        var oldb = b;\n        var oldc = c;\n        var oldd = d;\n        var olde = e;\n        for (var j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = x[i + j];\n            }\n            else {\n                w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n            }\n            let t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n            e = d;\n            d = c;\n            c = bit_rol(b, 30);\n            b = a;\n            a = t;\n        }\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n    }\n    return [a, b, c, d, e];\n};\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nconst sha1_ft = (t, b, c, d) => {\n    if (t < 20) {\n        return (b & c) | (~b & d);\n    }\n    if (t < 40) {\n        return b ^ c ^ d;\n    }\n    if (t < 60) {\n        return (b & c) | (b & d) | (c & d);\n    }\n    return b ^ c ^ d;\n};\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nconst sha1_kt = (t) => t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nconst safe_add = (x, y) => {\n    var lsw = (x & 0xffff) + (y & 0xffff);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xffff);\n};\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nconst bit_rol = (num, cnt) => {\n    return (num << cnt) | (num >>> (32 - cnt));\n};\n//# sourceMappingURL=sha1.js.map"]},"metadata":{},"sourceType":"script"}