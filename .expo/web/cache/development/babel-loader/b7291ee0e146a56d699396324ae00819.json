{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { WebView } from 'react-native-webview';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Display = function Display(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      link = _useState2[0],\n      setLink = _useState2[1];\n\n  var fetchData = function fetchData(url) {\n    var response;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(url));\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.json());\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getData = function getData() {\n    try {\n      fetchData(\"https://places-not-to-visit.herokuapp.com/\" + route.params.link).then(function (data) {\n        setLink(data);\n      });\n    } catch (error) {\n      _jsxs(Text, {\n        style: {\n          alignSelf: 'center',\n          fontSize: 30\n        },\n        children: [\"error getting webcams from \", route.params.link.split('/')[0]]\n      });\n\n      console.log(error);\n    }\n  };\n\n  useEffect(function () {\n    getData();\n  }, []);\n  return _jsx(WebView, {\n    style: {\n      flex: 1\n    },\n    source: link\n  });\n};\n\nexport default Display;","map":{"version":3,"sources":["/home/yanes/Documents/Places-not-to-visit/screens/display.js"],"names":["React","useState","useEffect","WebView","Display","route","link","setLink","fetchData","url","fetch","response","json","getData","params","then","data","error","alignSelf","fontSize","split","console","log","flex"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAEA,SAASC,OAAT,QAAwB,sBAAxB;;;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAa;AAAA,MAAXC,KAAW,QAAXA,KAAW;;AAEzB,kBAAuBJ,QAAQ,CAAC,EAAD,CAA/B;AAAA;AAAA,MAAOK,IAAP;AAAA,MAAYC,OAAZ;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACSC,KAAK,CAACD,GAAD,CADd;;AAAA;AACRE,YAAAA,QADQ;AAAA,6CAEPA,QAAQ,CAACC,IAAT,EAFO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAKA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClB,QAAI;AACAL,MAAAA,SAAS,CAAC,+CAA+CH,KAAK,CAACS,MAAN,CAAaR,IAA7D,CAAT,CAA4ES,IAA5E,CAAiF,UAAAC,IAAI,EAAI;AACrFT,QAAAA,OAAO,CAACS,IAAD,CAAP;AACP,OAFG;AAGH,KAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,YAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAE,QAAZ;AAAsBC,UAAAA,QAAQ,EAAE;AAAhC,SAAb;AAAA,kDAA8Ed,KAAK,CAACS,MAAN,CAAaR,IAAb,CAAkBc,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAA9E;AAAA;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACH;AACJ,GATD;;AAWAf,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,OAAO;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACI,KAAC,OAAD;AACI,IAAA,KAAK,EAAE;AAACU,MAAAA,IAAI,EAAG;AAAR,KADX;AAEI,IAAA,MAAM,EAAGjB;AAFb,IADJ;AAMH,CA9BD;;AAiCA,eAAeF,OAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text } from 'react-native'\nimport { WebView } from 'react-native-webview';\n\nconst Display = ({route}) => {\n\n    const [link,setLink] = useState({})\n\n    const fetchData = async (url) => {\n        const response = await fetch(url); \n        return response.json();\n    };\n\n    const getData = () => {\n        try {\n            fetchData(\"https://places-not-to-visit.herokuapp.com/\" + route.params.link).then(data => {\n                setLink(data)\n        });\n        } catch (error) {\n            <Text style={{alignSelf: 'center', fontSize: 30}}>error getting webcams from {route.params.link.split('/')[0]}</Text>\n            console.log(error)\n        }\n    };\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    return (\n        <WebView \n            style={{flex : 1}}\n            source={ link }\n        />\n    );\n}\n\n\nexport default Display;"]},"metadata":{},"sourceType":"module"}