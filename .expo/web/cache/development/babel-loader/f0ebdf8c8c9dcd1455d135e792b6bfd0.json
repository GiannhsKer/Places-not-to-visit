{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport uuid from 'react-native-uuid';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Results = function Results(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var api_key = \"21e506d74d464ffa90d220042210612\";\n\n  var fetchData = function fetchData(url) {\n    var response;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(url));\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.json());\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getData = function getData() {\n    try {\n      fetchData(\"http://api.weatherapi.com/v1/search.json?key=\" + api_key + \"&q=\" + route.params.place).then(function (data) {\n        setData(data);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(function () {\n    getData();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.titles,\n      children: \"Places Not To Visit\"\n    }), _jsxs(ScrollView, {\n      style: {\n        marginTop: 50\n      },\n      children: [_jsx(View, {\n        style: styles.borderline\n      }), data.length > 0 ? data.slice(0, 5).map(function (result) {\n        return _jsxs(View, {\n          children: [_jsxs(Pressable, {\n            style: {\n              alignSelf: 'center'\n            },\n            onPress: function onPress() {\n              navigation.navigate('Screens', {\n                city: result.name,\n                country: result.country\n              });\n            },\n            children: [_jsx(Text, {\n              children: \" \"\n            }), _jsxs(Text, {\n              style: styles.result,\n              children: [result.name, \", \", result.country]\n            }), _jsx(Text, {\n              children: \" \"\n            })]\n          }), _jsx(View, {\n            style: {\n              borderWidth: 1\n            }\n          })]\n        }, uuid.v4());\n      }) : _jsx(Not_found, {\n        place: route.params.place\n      })]\n    })]\n  });\n};\n\nvar Not_found = function Not_found(_ref2) {\n  var place = _ref2.place;\n  return _jsxs(View, {\n    style: {\n      alignSelf: 'center',\n      marginTop: 50\n    },\n    children: [_jsxs(Text, {\n      style: styles.titles,\n      children: [\"'\", place, \"'\"]\n    }), _jsx(Text, {\n      style: styles.error_text,\n      children: \"Place not found\"\n    }), _jsx(MaterialCommunityIcons, {\n      style: {\n        alignSelf: 'center'\n      },\n      name: \"alert-circle-outline\",\n      size: 24,\n      color: \"black\"\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  result: {\n    fontSize: 20\n  },\n  error_text: {\n    fontWeight: 'bold',\n    fontSize: 20\n  },\n  titles: {\n    marginTop: 100,\n    alignSelf: 'center',\n    fontSize: 30\n  },\n  borderline: {\n    borderWidth: 1\n  }\n});\nexport default Results;","map":{"version":3,"sources":["/home/yanes/Documents/Places-not-to-visit/screens/results.js"],"names":["React","useState","useEffect","MaterialCommunityIcons","uuid","Results","navigation","route","data","setData","api_key","fetchData","url","fetch","response","json","getData","params","place","then","error","console","styles","container","titles","marginTop","borderline","length","slice","map","result","alignSelf","navigate","city","name","country","borderWidth","v4","Not_found","error_text","StyleSheet","create","flex","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Pressable, ScrollView} from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport uuid from 'react-native-uuid';\n\nconst Results = ({navigation,route}) => {\n\n  const [data, setData] = useState([]);\n\n  const api_key = \"21e506d74d464ffa90d220042210612\"\n  \n  const fetchData = async (url) => {\n    const response = await fetch(url);\n    return response.json();\n  };\n\n  const getData = () => {\n    try {\n      fetchData(`http://api.weatherapi.com/v1/search.json?key=${api_key}&q=${route.params.place}`).then(data => {\n        setData(data)\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n \n   return (\n        <View style={styles.container}>\n            <Text style={styles.titles}>Places Not To Visit</Text>\n            <ScrollView style={{ marginTop : 50}}>\n                <View style={styles.borderline}></View>\n                {data.length > 0 ? data.slice(0,5).map(result => \n                    <View key = {uuid.v4()}>\n                        <Pressable style={{alignSelf : 'center'}} onPress = {() => {navigation.navigate('Screens',{city : result.name , country : result.country})}}>\n                            <Text> </Text>\n                            <Text style={styles.result}>{result.name}, {result.country}</Text>\n                            <Text> </Text>\n                        </Pressable>\n                        <View style={{borderWidth: 1}}></View>\n                    </View> ) : \n                <Not_found place={route.params.place}/>}\n            </ScrollView>\n        </View>\n   )\n}\n\nconst Not_found = ({place}) => {\n\n    return(\n        <View style = {{alignSelf: 'center', marginTop : 50}}>\n            <Text style={styles.titles}>'{place}'</Text>\n            <Text style={styles.error_text}>Place not found</Text>  \n            <MaterialCommunityIcons style={{ alignSelf : 'center'}} name=\"alert-circle-outline\" size={24} color=\"black\" />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n\n    container: {\n        flex: 1,\n    },\n    result: {\n        fontSize: 20\n    },\n    error_text : {\n        fontWeight : 'bold',\n        fontSize : 20,\n    },\n    titles: {\n        marginTop : 100,\n        alignSelf: 'center',\n        fontSize: 30,\n      },\n    borderline:{\n        borderWidth: 1,\n    }\n});\n\nexport default Results;"]},"metadata":{},"sourceType":"module"}