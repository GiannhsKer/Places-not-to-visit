{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.v35 = void 0;\n\nvar stringify_1 = require(\"./stringify\");\n\nvar parse_1 = require(\"./parse\");\n\nvar utils_1 = require(\"./utils\");\n\nvar v35 = function v35(name, version, hashfunc) {\n  var generateUUID = function generateUUID(value, namespace, buf) {\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (typeof value === 'string') {\n      value = utils_1.stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse_1.parse(namespace);\n    }\n\n    if (namespace && namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = utils_1.stringToBytes(hashfunc(utils_1.bytesToString(bytes)));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n    }\n\n    return buf ? buf : stringify_1.stringify(bytes);\n  };\n\n  return generateUUID;\n};\n\nexports.v35 = v35;","map":{"version":3,"sources":["../src/v35.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,WAAA,GAAA,OAAA,eAAA;;AACA,IAAA,OAAA,GAAA,OAAA,WAAA;;AACA,IAAA,OAAA,GAAA,OAAA,WAAA;;AASO,IAAM,GAAG,GAAG,SAAN,GAAM,CACjB,IADiB,EAEjB,OAFiB,EAGjB,QAHiB,EAID;AAChB,MAAM,YAAY,GAAG,SAAf,YAAe,CACnB,KADmB,EAEnB,SAFmB,EAGnB,GAHmB,EAKE;AAAA,QADrB,MACqB,uEADJ,CACI;;AACrB,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,MAAA,KAAK,GAAG,OAAA,CAAA,aAAA,CAAc,KAAd,CAAR;AACD;;AAED,QAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,MAAA,SAAS,GAAG,OAAA,CAAA,KAAA,CAAM,SAAN,CAAZ;AACD;;AAED,QAAI,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,EAAtC,EAA0C;AACxC,YAAM,SAAS,CACb,kEADa,CAAf;AAGD;;AAKD,QAAI,KAAK,GAAG,IAAI,UAAJ,CAAe,KAAK,KAAK,CAAC,MAA1B,CAAZ;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,SAAV;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB,SAAS,CAAC,MAA3B;AACA,IAAA,KAAK,GAAG,OAAA,CAAA,aAAA,CAAc,QAAQ,CAAC,OAAA,CAAA,aAAA,CAAc,KAAd,CAAD,CAAtB,CAAR;AAEA,IAAA,KAAK,CAAC,CAAD,CAAL,GAAY,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,OAA/B;AACA,IAAA,KAAK,CAAC,CAAD,CAAL,GAAY,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,IAA/B;;AAEA,QAAI,GAAJ,EAAS;AACP,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,EAAE,CAA1B,EAA6B;AAC3B,QAAA,GAAG,CAAC,MAAM,GAAG,CAAV,CAAH,GAAkB,KAAK,CAAC,CAAD,CAAvB;AACD;AACF;;AAED,WAAO,GAAG,GAAG,GAAH,GAAS,WAAA,CAAA,SAAA,CAAU,KAAV,CAAnB;AACD,GAtCD;;AAwCA,SAAO,YAAP;AACD,CA9CM;;AAAM,OAAA,CAAA,GAAA,GAAG,GAAH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.v35 = void 0;\n/* eslint-disable no-bitwise */\nconst stringify_1 = require(\"./stringify\");\nconst parse_1 = require(\"./parse\");\nconst utils_1 = require(\"./utils\");\nconst v35 = (name, version, hashfunc) => {\n    const generateUUID = (value, namespace, buf, offset = 0) => {\n        if (typeof value === 'string') {\n            value = utils_1.stringToBytes(value);\n        }\n        if (typeof namespace === 'string') {\n            namespace = parse_1.parse(namespace);\n        }\n        if (namespace && namespace.length !== 16) {\n            throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n        }\n        // Compute hash of namespace and value, Per 4.3\n        // Future: Use spread syntax when supported on all platforms, e.g.\n        // `bytes = hashfunc([...namespace, ... value])`\n        let bytes = new Uint8Array(16 + value.length);\n        bytes.set(namespace);\n        bytes.set(value, namespace.length);\n        bytes = utils_1.stringToBytes(hashfunc(utils_1.bytesToString(bytes)));\n        bytes[6] = (bytes[6] & 0x0f) | version;\n        bytes[8] = (bytes[8] & 0x3f) | 0x80;\n        if (buf) {\n            for (let i = 0; i < 16; ++i) {\n                buf[offset + i] = bytes[i];\n            }\n        }\n        return buf ? buf : stringify_1.stringify(bytes);\n    };\n    return generateUUID;\n};\nexports.v35 = v35;\n//# sourceMappingURL=v35.js.map"]},"metadata":{},"sourceType":"script"}